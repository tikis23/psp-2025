openapi: 3.0.4
info:
  title: Order/Reservation and POS API
  description: |-
    This API provides endpoints to manage customer orders, reservations, business services (e.g., for salons),
    items, taxes and discounts for a Point of Sale system.
    Access to management endpoints (creating, updating, or deleting items) is restricted
    to authenticated employees with the proper permissions.
  version: 1.0.0
tags:
  - name: Reservations
    description: Operations related to customer reservations. (Public)
  - name: Services (Salons)
    description: Operations for managing business services (e.g., haircuts, manicures).
  - name: Discounts
    description: Operations for managing available discounts and promotions.
  - name: Items
    description: Operations related to items
  - name: Item Variations
    description: Operations related to item variations
  - name: Taxes
    description: Operations related to taxes
  - name: Orders
    description: Order operations
  - name: Payments
    description: Operations related to order payments
  - name: Refunds
    description: Operations related to payment refunds
  - name: Gift Cards
    description: Gift card balance and verification
  - name: Webhooks
    description: Webhook endpoints for payment provider callbacks
  - name: business
    description: Business management operations
  - name: owner
    description: Owner management operations
  - name: employee
    description: Employee management operations


paths:

  /availability:
    get:
      tags:
        - Reservations
      summary: Find Available Reservation Times
      description: |-
        Retrieves a list of available time slots for a specific service and date range.
        This is the first step for a customer looking to make a new reservation or reschedule an existing one.
      operationId: getAvailability
      parameters:
        - name: serviceId
          in: query
          required: true
          description: The ID of the service for which to check availability.
          schema:
            type: string
            example: "svc_1a2b3c"
        - name: employeeId
          in: query
          required: false
          description: Optionally filter availability for a specific employee.
          schema:
            type: string
            example: "emp_4d5e6f"
        - name: startDate
          in: query
          required: true
          description: The start of the date range to check for availability (ISO 8601 format).
          schema:
            type: string
            format: date-time
            example: "2024-10-20T09:00:00Z"
        - name: endDate
          in: query
          required: true
          description: The end of the date range to check for availability (ISO 8601 format).
          schema:
            type: string
            format: date-time
            example: "2024-10-25T17:00:00Z"
      responses:
        "200":
          description: A list of available time slots.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AvailableSlot"
        "400":
          description: Bad request, such as missing required parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /reservations:
    post:
      tags:
        - Reservations
      summary: Create a New Reservation
      description: Creates a new reservation for a customer after an available time slot has been chosen.
      operationId: createReservation
      requestBody:
        description: Reservation details for the new booking.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReservation"
      responses:
        "201":
          description: The reservation was created successfully. The response body contains the full details of the created reservation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid input, such as a time slot that is no longer available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "409":
          description: Conflict. The requested time slot is no longer available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /reservations/{reservationId}:
    get:
      tags:
        - Reservations
      summary: Get Reservation Details
      description: Retrieves the complete details of a single reservation by its ID.
      operationId: getReservationById
      parameters:
        - name: reservationId
          in: path
          required: true
          description: The unique identifier of the reservation.
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      responses:
        "200":
          description: Successful retrieval of reservation details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: A reservation with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /reservations/{reservationId}/reschedule:
    put:
      tags:
        - Reservations
      summary: Reschedule an Existing Reservation
      description: Allows changing the time of an existing reservation to a new, available time slot.
      operationId: rescheduleReservation
      parameters:
        - name: reservationId
          in: path
          required: true
          description: The unique identifier of the reservation to be rescheduled.
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      requestBody:
        description: The new date and time for the reservation.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RescheduleRequest"
      responses:
        "200":
          description: The reservation was successfully rescheduled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: A reservation with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "409":
          description: The new requested time slot is not available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /reservations/{reservationId}/cancel:
    post:
      tags:
        - Reservations
      summary: Cancel a Reservation
      description: Cancels an active reservation. This is a final action and cannot be undone.
      operationId: cancelReservation
      parameters:
        - name: reservationId
          in: path
          required: true
          description: The unique identifier of the reservation to be cancelled.
          schema:
            type: string
            format: uuid
            example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      responses:
        "200":
          description: The reservation was successfully cancelled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: A reservation with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "409":
          description: The reservation is already cancelled or completed and cannot be cancelled again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /services:
    get:
      tags:
        - Services (Salons)
      summary: List All Services
      description: Retrieves a list of all services offered, typically for salons.
      operationId: listServices
      parameters:
        - name: isActive
          in: query
          required: false
          description: Filter by active status. Defaults to true.
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: A list of services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    post:
      tags:
        - Services (Salons)
      summary: Create a New Service
      description: Adds a new service. Requires authenticated employee credentials.
      operationId: createService
      security:
        - BearerAuth: []
      requestBody:
        description: The details of the service to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewService"
      responses:
        "201":
          description: Service created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: Invalid input for the service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.

  /services/{serviceId}:
    get:
      tags:
        - Services (Salons)
      summary: Get Service Details
      description: Retrieves the details of a specific service by its ID.
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique identifier of the service.
          schema:
            type: string
            example: "svc_1a2b3c"
      responses:
        "200":
          description: Service details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          description: Service not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      tags:
        - Services (Salons)
      summary: Update a Service
      description: Updates an existing service. Requires authenticated employee credentials.
      operationId: updateService
      security:
        - BearerAuth: []
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique identifier of the service.
          schema:
            type: string
            example: "svc_1a2b3c"
      requestBody:
        description: The updated details of the service.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewService"
      responses:
        "200":
          description: Service updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: Invalid input for the service.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.
        "404":
          description: Service not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      tags:
        - Services (Salons)
      summary: Archive a Service (Soft Delete)
      description: |-
        Archives a service by setting its `isActive` flag to `false`.
        Requires authenticated employee credentials.
      operationId: deleteService
      security:
        - BearerAuth: []
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique identifier of the service to archive.
          schema:
            type: string
            example: "svc_1a2b3c"
      responses:
        "200":
          description: Service archived successfully. Returns the service in its new archived state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.
        "404":
          description: Service not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /discounts:
    get:
      tags:
        - Discounts
      summary: List All Discounts
      description: Retrieves a list of all available discounts. Requires authentication.
      operationId: listDiscounts
      security:
        - BearerAuth: []
      parameters:
        - name: isActive
          in: query
          required: false
          description: Filter by active status. Defaults to true.
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: A list of discounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Discount"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
    post:
      tags:
        - Discounts
      summary: Create a New Discount
      description: Adds a new discount to the system. Requires authenticated employee credentials.
      operationId: createDiscount
      security:
        - BearerAuth: []
      requestBody:
        description: The details of the discount to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDiscount"
      responses:
        "201":
          description: Discount created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
        "400":
          description: Invalid input for the discount.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.

  /discounts/{discountId}:
    get:
      tags:
        - Discounts
      summary: Get Discount Details
      description: Retrieves the details of a specific discount by its ID. Requires authentication.
      operationId: getDiscountById
      security:
        - BearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          description: The unique identifier of the discount.
          schema:
            type: string
            example: "dsc_456"
      responses:
        "200":
          description: Discount details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "404":
          description: Discount not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    put:
      tags:
        - Discounts
      summary: Update a Discount
      description: Updates the details of an existing discount. Requires authenticated employee credentials.
      operationId: updateDiscount
      security:
        - BearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          description: The unique identifier of the discount.
          schema:
            type: string
            example: "dsc_456"
      requestBody:
        description: The updated details of the discount.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDiscount"
      responses:
        "200":
          description: Discount updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
        "400":
          description: Invalid input for the discount.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.
        "404":
          description: Discount not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    delete:
      tags:
        - Discounts
      summary: Deactivate a Discount (Soft Delete)
      description: |-
        Deactivates a discount by setting its `isActive` flag to `false`.
        Requires authenticated employee credentials.
      operationId: deleteDiscount
      security:
        - BearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          description: The unique identifier of the discount to deactivate.
          schema:
            type: string
            example: "dsc_456"
      responses:
        "200":
          description: Discount deactivated successfully. Returns the discount in its new inactive state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
        "401":
          description: Unauthorized. Invalid or missing authentication token.
        "403":
          description: Forbidden. The authenticated employee does not have permission.
        "404":
          description: Discount not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /items:
    get:
      tags: [Items]
      summary: List all items
      description: Retrieves items with optional filters
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Search by name/description
        - in: query
          name: tax_id
          schema: { type: string }
        - in: query
          name: discount_id
          schema: { type: string }
      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Item" }
              examples:
                sample:
                  value:
                    items:
                      - id: "item_123"
                        name: "Latte"
                        description: "Freshly brewed milk coffee"
                        tax_id: "tax_vat_21"
                        discount_id: null
                        base_price: 2.5
                        quantity: 1
                        created_at: "2025-10-05T14:30:00Z"
                        updated_at: "2025-10-05T14:30:00Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - BearerAuth: []
    post:
      tags: [Items]
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
            examples:
              createLatte:
                value:
                  name: "Latte"
                  description: "Freshly brewed milk coffee"
                  tax_id: "tax_vat_21"
                  discount_id: null
                  base_price: 2.5
                  quantity: 1
      responses:
        "201":
          description: Item created successfully
          headers:
            Location:
              description: URL of the created item
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
              example:
                id: "item_123"
                name: "Latte"
                description: "Freshly brewed milk coffee"
                tax_id: "tax_vat_21"
                discount_id: null
                base_price: 2.5
                quantity: 1
                created_at: "2025-10-05T14:30:00Z"
                updated_at: "2025-10-05T14:30:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []

  /items/{itemId}:
    get:
      tags: [Items]
      summary: Get item details
      parameters:
        - $ref: "#/components/parameters/ItemIdParam"
      responses:
        "200":
          description: Item details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ItemNotFound"
      security:
        - BearerAuth: []
    put:
      tags: [Items]
      summary: Replace an item
      parameters:
        - $ref: "#/components/parameters/ItemIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemRequest" }
      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ItemNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    patch:
      tags: [Items]
      summary: Partially update an item
      parameters:
        - $ref: "#/components/parameters/ItemIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemPatch" }
      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ItemNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    delete:
      tags: [Items]
      summary: Delete an item
      parameters:
        - $ref: "#/components/parameters/ItemIdParam"
      responses:
        "204":
          description: Item deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/ItemNotFound"
      security:
        - BearerAuth: []

  /item-variations:
    get:
      tags: [Item Variations]
      summary: List item variations
      parameters:
        - in: query
          name: item_id
          schema: { type: string }
          description: Filter by parent item ID
        - in: query
          name: q
          schema: { type: string }
          description: Search by name/description 
      responses:
        "200":
          description: List of item variations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  item_variations:
                    type: array
                    items: { $ref: "#/components/schemas/ItemVariation" }
      security:
        - BearerAuth: []
    post:
      tags: [Item Variations]
      summary: Create a new item variation
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemVariationRequest" }
            examples:
              largeLatte:
                value:
                  item_id: "item_123"
                  name: "Large"
                  description: "Large cup"
                  price_diff: 0.2
                  quantity: 1
      responses:
        "201":
          description: Item variation created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ItemVariation" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []

  /item-variations/{variationId}:
    get:
      tags: [Item Variations]
      summary: Get item variation details
      parameters:
        - $ref: "#/components/parameters/VariationIdParam"
      responses:
        "200":
          description: Variation details retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ItemVariation" }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/VariationNotFound"
      security:
        - BearerAuth: []
    put:
      tags: [Item Variations]
      summary: Replace an item variation
      parameters:
        - $ref: "#/components/parameters/VariationIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemVariationRequest" }
      responses:
        "200":
          description: Item variation updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ItemVariation" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/VariationNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    patch:
      tags: [Item Variations]
      summary: Partially update an item variation
      parameters:
        - $ref: "#/components/parameters/VariationIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemVariationPatch" }
      responses:
        "200":
          description: Item variation updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ItemVariation" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/VariationNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    delete:
      tags: [Item Variations]
      summary: Delete an item variation
      parameters:
        - $ref: "#/components/parameters/VariationIdParam"
      responses:
        "204":
          description: Item variation deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/VariationNotFound"
      security:
        - BearerAuth: []

  /taxes:
    get:
      tags: [Taxes]
      summary: List taxes
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Search by name
      responses:
        "200":
          description: List of taxes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  taxes:
                    type: array
                    items: { $ref: "#/components/schemas/Tax" }
      security:
        - BearerAuth: []
    post:
      tags: [Taxes]
      summary: Create a new tax
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TaxRequest" }
            examples:
              vat21:
                value:
                  name: "VAT 21%"
                  amount: 0.21
      responses:
        "201":
          description: Tax created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tax" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []

  /taxes/{taxId}:
    get:
      tags: [Taxes]
      summary: Get tax details
      parameters:
        - $ref: "#/components/parameters/TaxIdParam"
      responses:
        "200":
          description: Tax details retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tax" }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/TaxNotFound"
      security:
        - BearerAuth: []
    put:
      tags: [Taxes]
      summary: Replace a tax
      parameters:
        - $ref: "#/components/parameters/TaxIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TaxRequest" }
      responses:
        "200":
          description: Tax updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tax" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/TaxNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    patch:
      tags: [Taxes]
      summary: Partially update a tax
      parameters:
        - $ref: "#/components/parameters/TaxIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TaxPatch" }
      responses:
        "200":
          description: Tax updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Tax" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/TaxNotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []
    delete:
      tags: [Taxes]
      summary: Delete a tax
      parameters:
        - $ref: "#/components/parameters/TaxIdParam"
      responses:
        "204":
          description: Tax deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/TaxNotFound"
      security:
        - BearerAuth: []


  /orders:
    post:
      tags:
        - Orders
      summary: Creates a new order.
      operationId: createOrder
      security:
        - BearerAuth: []
      requestBody:
        description: Create a new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: "ord_123"
                employeeId: 1234
                type: "open"
                items: []
                services: []
                tipAmount: 0
                createdTimestamp: "2025-10-20T12:00:00Z"
                closedTimestamp: null
        '400':
          description: Invalid input
        '404':
          description: Employee not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
                
  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order.
      operationId: getOrder
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  
    delete:
      tags:
        - Orders
      summary: Close order.
      operationId: closeOrder
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      responses:
        '200':
          description: Successful operation
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  
  /orders/{orderId}/items:
    post:
      tags:
        - Orders
      summary: Add item to an order.
      operationId: orderAddItem
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        description: Item to add to order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /orders/{orderId}/items/{itemId}:
    delete:
      tags:
        - Orders
      summary: Remove item from order.
      operationId: orderRemoveItem
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
        - $ref: "#/components/parameters/ItemIdParam"
      responses:
        '200':
          description: Successful operation
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
    
    
  /orders/{orderId}/services:
    post:
      tags:
        - Orders
      summary: Add service to an order.
      operationId: orderAddService
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        description: Service to add to order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"

  /orders/{orderId}/services/{serviceId}:
    delete:
      tags:
        - Orders
      summary: Remove service from order.
      operationId: orderRemoveService
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
        - $ref: "#/components/parameters/ServiceIdParam"
      responses:
        '200':
          description: Successful operation
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  
  /orders/{orderId}/tip:
    put:
      tags:
        - Orders
      summary: Set tip amount on order.
      operationId: orderSetTipAmount
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        description: Tip amount to set. 0 means no tip
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TipAmount'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
  
  
  /orders/{orderId}/payments:
    get:
      tags:
        - Payments
      summary: List all payments for an order
      description: Retrieves all payment records associated with an order, including their status and amounts
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      responses:
        "200":
          description: List of payments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Payment"
                  totalPaid:
                    type: number
                    format: double
                    description: Total amount paid so far
                    example: 45.50
                  remainingBalance:
                    type: number
                    format: double
                    description: Remaining amount to be paid
                    example: 14.50
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/OrderNotFound"
      security:
        - BearerAuth: []

    post:
      tags:
        - Payments
      summary: Create a new payment for an order
      description: |
        Creates a payment record for an order. Supports multiple payment types:
        - **cash**: Immediate payment, captured instantly
        - **gift_card**: Redeems from gift card balance
        - **card**: Credit/debit card via Stripe Payment Intent

        Multiple payments can be made for split checks until order total is fully paid.
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CashPaymentRequest"
                - $ref: "#/components/schemas/GiftCardPaymentRequest"
                - $ref: "#/components/schemas/CardPaymentRequest"
            examples:
              cashPayment:
                summary: Cash payment
                value:
                  payment_type: cash
                  amount: 25.00
              giftCardPayment:
                summary: Gift card payment
                value:
                  payment_type: gift_card
                  amount: 15.00
                  gift_card_code: "GC-123456789"
              cardPayment:
                summary: Card payment
                value:
                  payment_type: card
                  amount: 60.00
      responses:
        "201":
          description: Payment created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CashPaymentResponse"
                  - $ref: "#/components/schemas/GiftCardPaymentResponse"
                  - $ref: "#/components/schemas/CardPaymentResponse"
              examples:
                cashSuccess:
                  summary: Cash payment success
                  value:
                    id: "pay_cash_001"
                    orderId: "ord_123"
                    payment_type: cash
                    amount: 25.00
                    status: succeeded
                    createdAt: "2025-10-05T14:30:00Z"
                    remainingBalance: 0.00
                giftCardSuccess:
                  summary: Gift card payment success
                  value:
                    id: "pay_gc_001"
                    orderId: "ord_123"
                    payment_type: gift_card
                    amount: 15.00
                    status: succeeded
                    gift_card_code: "GC-123456789"
                    remaining_card_balance: 5.00
                    createdAt: "2025-10-05T14:30:00Z"
                    remainingBalance: 10.00
                cardPendingAuth:
                  summary: Card payment requires authentication
                  value:
                    id: "pay_card_001"
                    orderId: "ord_123"
                    payment_type: card
                    amount: 60.00
                    status: requires_action
                    stripe_client_secret: "pi_xxx_secret_yyy"
                    requires_action: true
                    createdAt: "2025-10-05T14:30:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/OrderNotFound"
        "409":
          $ref: "#/components/responses/PaymentConflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []

  /payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Get payment details
      description: Retrieves detailed information about a specific payment
      parameters:
        - name: paymentId
          in: path
          required: true
          description: Unique payment identifier
          schema:
            type: string
            example: "pay_123"
      responses:
        "200":
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
              example:
                errorCode: "PAYMENT_NOT_FOUND"
                message: "Payment not found"
      security:
        - BearerAuth: []

  /payments/{paymentId}/confirm:
    post:
      tags:
        - Payments
      summary: Confirm a card payment
      description: |
        Confirms a card payment with Stripe after customer authentication.
        Used for both regular payments and 3DS authentication completion.
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method_id:
                  type: string
                  description: Stripe payment method ID from client
                  example: "pm_card_visa"
      responses:
        "200":
          description: Payment confirmed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardPaymentResponse"
              example:
                id: "pay_card_001"
                orderId: "ord_123"
                payment_type: card
                amount: 60.00
                status: succeeded
                stripe_payment_intent_id: "pi_xxx"
                createdAt: "2025-10-05T14:30:00Z"
                confirmedAt: "2025-10-05T14:31:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Payment not found
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
      security:
        - BearerAuth: []

  /gift-cards/{cardCode}/balance:
    get:
      tags:
        - Gift Cards
      summary: Check gift card balance
      description: Verifies a gift card code and returns its current balance
      parameters:
        - name: cardCode
          in: path
          required: true
          description: Gift card code
          schema:
            type: string
            example: "GC-123456789"
      responses:
        "200":
          description: Gift card balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "GC-123456789"
                  balance:
                    type: number
                    format: double
                    example: 50.00
                  currency:
                    type: string
                    example: "USD"
                  isActive:
                    type: boolean
                    example: true
                  expiryDate:
                    type: string
                    format: date-time
                    nullable: true
                    example: "2026-12-31T23:59:59Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Gift card not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
              example:
                errorCode: "GIFT_CARD_NOT_FOUND"
                message: "Gift card not found or invalid"
      security:
        - BearerAuth: []

  /orders/{orderId}/refunds:
    post:
      tags:
        - Refunds
      summary: Create a full refund for an order
      description: |
        Initiates a full refund for a closed/paid order. 
        Refunds are processed back to the original payment methods.
        - Cash payments: Recorded as cash refund (CAPTURED status)
        - Gift card payments: Credit returned to gift card
        - Card payments: Refund created via Stripe (may be async)

        **Note**: Only full refunds are supported. Partial refunds are not allowed.
      parameters:
        - $ref: "#/components/parameters/OrderIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for the refund
                  example: "Customer requested cancellation"
                  maxLength: 500
              required:
                - reason
      responses:
        "201":
          description: Refund initiated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
              example:
                refundId: "ref_001"
                orderId: "ord_123"
                totalAmount: 60.00
                status: processing
                refundBreakdown:
                  - originalPaymentId: "pay_card_001"
                    paymentType: card
                    amount: 45.00
                    refundStatus: processing
                    stripeRefundId: "re_xxx"
                  - originalPaymentId: "pay_cash_001"
                    paymentType: cash
                    amount: 15.00
                    refundStatus: completed
                createdAt: "2025-10-05T15:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/OrderNotFound"
        "409":
          description: Refund conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
              examples:
                alreadyRefunded:
                  summary: Order already refunded
                  value:
                    errorCode: "ORDER_ALREADY_REFUNDED"
                    message: "Order has already been refunded"
                orderNotPaid:
                  summary: Order not paid
                  value:
                    errorCode: "ORDER_NOT_PAID"
                    message: "Cannot refund an unpaid order"
      security:
        - BearerAuth: []

  /refunds/{refundId}:
    get:
      tags:
        - Refunds
      summary: Get refund status
      description: Retrieves the current status and details of a refund
      parameters:
        - name: refundId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Refund details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefundResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Refund not found
      security:
        - BearerAuth: []

  /webhooks/stripe:
    post:
      tags:
        - Webhooks
      summary: Stripe webhook endpoint
      description: |
        Receives webhook events from Stripe for payment status updates.
        Handles events such as:
        - payment_intent.succeeded
        - payment_intent.payment_failed
        - payment_intent.canceled
        - charge.refunded

        **Security**: Validates Stripe signature header.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "evt_xxx"
                type:
                  type: string
                  example: "payment_intent.succeeded"
                data:
                  type: object
                  properties:
                    object:
                      type: object
                      description: The Stripe object (PaymentIntent, Charge, etc.)
      responses:
        "200":
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
                    example: true
        "400":
          description: Invalid signature or payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
              example:
                errorCode: "INVALID_SIGNATURE"
                message: "Invalid webhook signature"
  
  /businesses:
    get:
      tags:
        - business
      summary: Get all businesses
      description: Retrieve a list of all businesses. SuperAdmin can see all, owners can see only their businesses.
      operationId: getAllBusinesses
      parameters:
        - name: type
          in: query
          description: Filter by business type
          required: false
          schema:
            type: string
            enum:
              - cater
              - beauty
        - name: status
          in: query
          description: Filter by business status
          required: false
          schema:
            type: string
            enum:
              - pending
              - cancelled
              - onboarded
              - active
              - suspended
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Business'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    post:
      tags:
        - business
      summary: Create a new business
      description: Create a new business. Only owners and superadmins can create businesses.
      operationId: createBusiness
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessCreate'
      responses:
        '201':
          description: Business created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /businesses/{businessId}:
    get:
      tags:
        - business
      summary: Get business by ID
      description: Retrieve a specific business by its ID
      operationId: getBusinessById
      parameters:
        - name: businessId
          in: path
          description: ID of business to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Business not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    put:
      tags:
        - business
      summary: Update an existing business
      description: Update business details. Only business owner and superadmin can update.
      operationId: updateBusiness
      parameters:
        - name: businessId
          in: path
          description: ID of business to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessUpdate'
      responses:
        '200':
          description: Business updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Business not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    delete:
      tags:
        - business
      summary: Delete a business
      description: Delete a business. Only superadmin can delete businesses.
      operationId: deleteBusiness
      parameters:
        - name: businessId
          in: path
          description: ID of business to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Business deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Business not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /owners:
    get:
      tags:
        - owner
      summary: Get all owners
      description: Retrieve a list of all owners. Only superadmin can access this endpoint.
      operationId: getAllOwners
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Owner'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    post:
      tags:
        - owner
      summary: Create a new owner
      description: Register a new business owner
      operationId: createOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerCreate'
      responses:
        '201':
          description: Owner created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /owners/{ownerId}:
    get:
      tags:
        - owner
      summary: Get owner by ID
      description: Retrieve a specific owner by their ID
      operationId: getOwnerById
      parameters:
        - name: ownerId
          in: path
          description: ID of owner to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    put:
      tags:
        - owner
      summary: Update an existing owner
      description: Update owner details. Owners can update their own information, superadmin can update any owner.
      operationId: updateOwner
      parameters:
        - name: ownerId
          in: path
          description: ID of owner to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerUpdate'
      responses:
        '200':
          description: Owner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    delete:
      tags:
        - owner
      summary: Delete an owner
      description: Delete an owner. Only superadmin can delete owners.
      operationId: deleteOwner
      parameters:
        - name: ownerId
          in: path
          description: ID of owner to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Owner deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /employees:
    get:
      tags:
        - employee
      summary: Get all employees
      description: Retrieve a list of employees. Business owners see only their employees, superadmin sees all.
      operationId: getAllEmployees
      parameters:
        - name: businessId
          in: query
          description: Filter by business ID
          schema:
            type: integer
            format: int64
        - name: role
          in: query
          description: Filter by employee role
          schema:
            type: string
            enum:
              - employee
              - support
              - owner
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Employee'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    post:
      tags:
        - employee
      summary: Create a new employee
      description: Create a new employee. Only business owners can create employees for their business, superadmin can create for any business.
      operationId: createEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /employees/{employeeId}:
    get:
      tags:
        - employee
      summary: Get employee by ID
      description: Retrieve a specific employee by their ID
      operationId: getEmployeeById
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    put:
      tags:
        - employee
      summary: Update an existing employee
      description: Update employee details. Only business owner can update their employees, superadmin can update any employee.
      operationId: updateEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdate'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

    delete:
      tags:
        - employee
      summary: Delete an employee
      description: Delete an employee. Only business owner can delete their employees, superadmin can delete any employee.
      operationId: deleteEmployee
      parameters:
        - name: employeeId
          in: path
          description: ID of employee to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employee deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      security:
        - BearerAuth: []

  /auth/login:
    post:
      tags:
        - employee
      summary: Employee login
      description: Authenticate an employee using their employee code and password
      operationId: employeeLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - employeeCode
                - password
              properties:
                employeeCode:
                  type: string
                  example: "EMP001"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  employee:
                    $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  
components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        A JWT token obtained from the authentication service after employee login.
        The token contains the employee's ID and role (e.g., 'cashier', 'manager').

  parameters:
    OrderIdParam:
      name: orderId
      in: path
      required: true
      description: Unique order identifier
      schema:
        type: string
        example: "ord_123"
    ServiceIdParam:
      name: serviceId
      in: path
      required: true
      description: Unique service identifier
      schema:
        type: string
        example: "serv_123"
    ItemIdParam:
      name: itemId
      in: path
      required: true
      description: Unique item identifier
      schema:
        type: string
        example: "item_123"
    VariationIdParam:
      name: variationId
      in: path
      required: true
      description: Unique item variation identifier
      schema:
        type: string
        example: "var_123"
    TaxIdParam:
      name: taxId
      in: path
      required: true
      description: Unique tax identifier
      schema:
        type: string
        example: "tax_vat_21"

  schemas:
  
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the reservation.
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        customerName:
          type: string
          example: "Jane Doe"
        customerPhone:
          type: string
          example: "+15551234567"
        serviceId:
          type: string
          example: "svc_1a2b3c"
        employeeId:
          type: string
          example: "emp_4d5e6f"
        reservationDate:
          type: string
          format: date-time
          example: "2024-10-21T14:00:00Z"
        status:
          type: string
          enum: [confirmed, cancelled, completed]
          example: "confirmed"

    NewReservation:
      type: object
      required:
        - customerName
        - customerPhone
        - serviceId
        - employeeId
        - reservationDate
      properties:
        customerName:
          type: string
          description: The customer's full name.
          example: "John Smith"
        customerPhone:
          type: string
          description: The customer's phone number, used for sending SMS notifications.
          example: "+15557654321"
        serviceId:
          type: string
          description: The ID of the service being booked.
          example: "svc_1a2b3c"
        employeeId:
          type: string
          description: The ID of the employee requested for the service.
          example: "emp_4d5e6f"
        reservationDate:
          type: string
          format: date-time
          description: The chosen date and time for the reservation.
          example: "2024-10-21T14:00:00Z"

    AvailableSlot:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
          example: "2024-10-21T14:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2024-10-21T15:00:00Z"
        employeeId:
          type: string
          example: "emp_4d5e6f"

    RescheduleRequest:
      type: object
      required:
        - newReservationDate
      properties:
        newReservationDate:
          type: string
          format: date-time
          description: The new requested date and time for the reservation.
          example: "2024-10-22T10:00:00Z"
    Service:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the service.
          example: "svc_1a2b3c"
        name:
          type: string
          example: "Men's Haircut"
        description:
          type: string
          example: "Standard men's haircut and style."
        price:
          type: number
          format: double
          example: 30.50
        taxId:
          type: string
          description: The ID of the applicable tax rate.
          example: "tax_123"
        employeeId:
          type: string
          description: The ID of the employee associated with this service.
          example: "emp_4d5e6f"
        isActive:
          type: boolean
          description: Whether the service is active and available for booking/sale.
          example: true

    NewService:
      type: object
      required:
        - name
        - price
        - employeeId
      properties:
        name:
          type: string
          example: "Deluxe Manicure"
        description:
          type: string
          example: "Includes nail shaping, cuticle care, massage, and polish."
        price:
          type: number
          format: double
          example: 45.00
        taxId:
          type: string
          description: The ID of the applicable tax rate.
          example: "tax_123"
        employeeId:
          type: string
          description: The ID of an employee that can perform this service.
          example: "emp_4d5e6f"

    Discount:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the discount.
          example: "dsc_456"
        name:
          type: string
          example: "Holiday Special"
        amount:
          type: number
          format: double
          description: "The value of the discount. Can be a fixed amount or a percentage."
          example: 10.00
        expiryDate:
          type: string
          format: date-time
          description: The date and time when the discount expires.
          example: "2024-12-31T23:59:59Z"
        isActive:
          type: boolean
          description: Whether the discount is active and available for use.
          example: true
        requiredRole:
          type: string
          description: The minimum employee role required to apply this discount (e.g., 'cashier', 'manager'). If null, any employee can apply it.
          enum: [cashier, manager, admin]
          nullable: true
          example: "manager"

    NewDiscount:
      type: object
      required:
        - name
        - amount
      properties:
        name:
          type: string
          example: "Student Discount"
        amount:
          type: number
          format: double
          description: "The value of the discount. Can be a fixed amount or a percentage."
          example: 15.00
        expiryDate:
          type: string
          format: date-time
          description: The date and time when the discount expires.
          example: "2025-05-31T23:59:59Z"
        requiredRole:
          type: string
          description: The minimum employee role required to create and apply this discount.
          enum: [cashier, manager, admin]
          nullable: true
          example: "cashier"
  
    Item:
      type: object
      properties:
        id: { type: string, example: "item_123" }
        name: { type: string, example: "Latte" }
        description:
          type: string
          nullable: true
          example: "Freshly brewed milk coffee"
        tax_id:
          type: string
          nullable: true
          example: "tax_vat_21"
        discount_id:
          type: string
          nullable: true
          example: null
        base_price:
          type: number
          format: double
          example: 2.5
          description: Base unit price before variations/discounts/taxes
        quantity:
          type: number
          format: double
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
      required: [id, name, base_price, quantity]

    ItemRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        tax_id: { type: string, nullable: true }
        discount_id: { type: string, nullable: true }
        base_price: { type: number, format: double, minimum: 0 }
        quantity: { type: number, format: double, minimum: 0 }
      required: [name, base_price, quantity]

    ItemPatch:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        tax_id: { type: string, nullable: true }
        discount_id: { type: string, nullable: true }
        base_price: { type: number, format: double, minimum: 0 }
        quantity: { type: number, format: double, minimum: 0 }

    ItemVariation:
      type: object
      properties:
        id: { type: string, example: "var_123" }
        item_id: { type: string, example: "item_123" }
        name: { type: string, example: "Large" }
        description:
          type: string
          nullable: true
          example: "Large cup"
        price_diff:
          type: number
          format: double
          example: 0.2
        quantity:
          type: number
          format: double
          example: 1
        effective_price:
          type: number
          format: double
          readOnly: true
          example: 2.7
        created_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
      required: [id, item_id, name, price_diff, quantity]

    ItemVariationRequest:
      type: object
      properties:
        item_id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        price_diff: { type: number, format: double }
        quantity: { type: number, format: double, minimum: 0 }
      required: [item_id, name, price_diff, quantity]

    ItemVariationPatch:
      type: object
      properties:
        item_id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        price_diff: { type: number, format: double }
        quantity: { type: number, format: double, minimum: 0 }

    Tax:
      type: object
      properties:
        id: { type: string, example: "tax_vat_21" }
        name: { type: string, example: "VAT 21%" }
        amount:
          type: number
          format: double
          example: 0.21
          description: Tax rate (0.21 = 21%).
        created_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
      required: [id, name, amount]

    TaxRequest:
      type: object
      properties:
        name: { type: string }
        amount: { type: number, format: double }
      required: [name, amount]

    TaxPatch:
      type: object
      properties:
        name: { type: string }
        amount: { type: number, format: double }
  
  
    CreateOrder:
      type: object
      properties:
        employeeId:
          type: integer
          format: int64
          example: 1234
    
    Order:
      type: object
      properties:
        id:
          type: string
          example: "ord_123"
        employeeId:
          type: integer
          format: int64
          example: 1234
        type:
          type: string
          description: Order Status
          example: open
          enum:
            - open
            - closed
            - cancelled
            - refunded
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        tipAmount:
          type: integer
          format: int64
          example: 130
        createdTimestamp:
          type: string
          format: date-time
        closedTimestamp:
          type: string
          format: date-time

    TipAmount:
      type: object
      properties:
        tipAmount:
          type: integer
          format: int64
          example: 130
        
    OrderSummary:
      type: object
      properties:
        orderId:
          type: string
          example: "ord_123"
        items:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              quantity:
                type: integer
              price:
                type: number
                format: double
        subtotal:
          type: number
          format: double
          description: Sum of all items before taxes/discounts
          example: 50.00
        taxAmount:
          type: number
          format: double
          example: 4.50
        discountAmount:
          type: number
          format: double
          example: 5.00
        tipAmount:
          type: number
          format: double
          example: 10.00
        grandTotal:
          type: number
          format: double
          description: Final amount to be paid
          example: 59.50
        totalPaid:
          type: number
          format: double
          description: Amount paid so far
          example: 30.00
        remainingBalance:
          type: number
          format: double
          description: Amount still owed
          example: 29.50
        status:
          type: string
          enum: [open, partially_paid, paid, closed, cancelled, refunded]
          example: "partially_paid"

    Payment:
      type: object
      properties:
        id:
          type: string
          example: "pay_123"
        orderId:
          type: string
          example: "ord_123"
        payment_type:
          type: string
          enum: [cash, gift_card, card]
          example: "card"
        amount:
          type: number
          format: double
          example: 30.00
        status:
          type: string
          enum:
            [requires_action, processing, succeeded, failed, canceled, refunded]
        createdAt:
          type: string
          format: date-time
          example: "2025-10-05T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-05T14:31:00Z"
      required:
        - id
        - orderId
        - payment_type
        - amount
        - status

    CashPaymentRequest:
      type: object
      properties:
        payment_type:
          type: string
          enum: [cash]
          example: cash
        amount:
          type: number
          format: double
          minimum: 0.01
          example: 25.00
      required:
        - payment_type
        - amount

    CashPaymentResponse:
      allOf:
        - $ref: "#/components/schemas/Payment"
        - type: object
          properties:
            remainingBalance:
              type: number
              format: double
              description: Remaining order balance after this payment
              example: 0.00

    GiftCardPaymentRequest:
      type: object
      properties:
        payment_type:
          type: string
          enum: [gift_card]
          example: gift_card
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Amount to charge from gift card
          example: 15.00
        gift_card_code:
          type: string
          description: Gift card code/number
          example: "GC-123456789"
      required:
        - payment_type
        - amount
        - gift_card_code

    GiftCardPaymentResponse:
      allOf:
        - $ref: "#/components/schemas/Payment"
        - type: object
          properties:
            gift_card_code:
              type: string
              example: "GC-123456789"
            amount_redeemed:
              type: number
              format: double
              description: Amount actually redeemed from card
              example: 15.00
            remaining_card_balance:
              type: number
              format: double
              description: Remaining balance on the gift card
              example: 5.00
            remainingBalance:
              type: number
              format: double
              description: Remaining order balance
              example: 10.00

    CardPaymentRequest:
      type: object
      properties:
        payment_type:
          type: string
          enum: [card]
          example: card
        amount:
          type: number
          format: double
          minimum: 0.01
          example: 60.00
      required:
        - payment_type
        - amount

    CardPaymentResponse:
      allOf:
        - $ref: "#/components/schemas/Payment"
        - type: object
          properties:
            stripe_payment_intent_id:
              type: string
              description: Stripe PaymentIntent ID
              example: "pi_xxx"
            stripe_client_secret:
              type: string
              description: Client secret for Stripe.js confirmation
              example: "pi_xxx_secret_yyy"
            requires_action:
              type: boolean
              description: Whether customer action (3DS) is required
              example: false
            confirmedAt:
              type: string
              format: date-time
              nullable: true
              description: When payment was confirmed
              example: "2025-10-05T14:31:00Z"

    RefundResponse:
      type: object
      properties:
        refundId:
          type: string
          example: "ref_001"
        orderId:
          type: string
          example: "ord_123"
        totalAmount:
          type: number
          format: double
          description: Total amount being refunded
          example: 60.00
        status:
          type: string
          enum: [processing, completed, failed]
          description: Overall refund status
          example: "processing"
        refundBreakdown:
          type: array
          description: Breakdown by original payment method
          items:
            type: object
            properties:
              originalPaymentId:
                type: string
                example: "pay_card_001"
              paymentType:
                type: string
                enum: [cash, gift_card, card]
                example: "card"
              amount:
                type: number
                format: double
                example: 45.00
              refundStatus:
                type: string
                enum: [pending, processing, completed, failed]
                example: "processing"
              stripeRefundId:
                type: string
                nullable: true
                description: Stripe refund ID (for card payments)
                example: "re_xxx"
              giftCardCreditId:
                type: string
                nullable: true
                description: Gift card credit transaction ID
        reason:
          type: string
          example: "Customer requested cancellation"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-05T15:00:00Z"
        completedAt:
          type: string
          format: date-time
          nullable: true
          example: null
      required:
        - refundId
        - orderId
        - totalAmount
        - status
        - refundBreakdown

    Business:
      type: object
      required:
        - id
        - name
        - ownerId
        - type
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Unique identifier for the business
        name:
          type: string
          example: "Joe's Coffee Shop"
          description: Business name
        description:
          type: string
          example: "A cozy coffee shop in downtown"
          description: Business description
        ownerId:
          type: integer
          format: int64
          example: 101
          description: ID of the business owner
        type:
          type: string
          enum:
            - cater
            - beauty
          example: "cater"
          description: Type of business
        address:
          type: string
          example: "123 Main Street, New York, NY 10001"
          description: Physical address of the business
        phoneNumber:
          type: string
          example: "+1234567890"
          description: Contact phone number
        email:
          type: string
          format: email
          example: "info@joescoffee.com"
          description: Contact email address
        status:
          type: string
          enum:
            - pending
            - cancelled
            - onboarded
            - active
            - suspended
          example: "active"
          description: Current business status
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
          description: Timestamp when business was created
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T14:45:00Z"
          description: Timestamp when business was last updated

    BusinessCreate:
      type: object
      required:
        - name
        - ownerId
        - type
        - email
      properties:
        name:
          type: string
          example: "Joe's Coffee Shop"
        description:
          type: string
          example: "A cozy coffee shop in downtown"
        ownerId:
          type: integer
          format: int64
          example: 101
        type:
          type: string
          enum:
            - cater
            - beauty
          example: "cater"
        address:
          type: string
          example: "123 Main Street, New York, NY 10001"
        phoneNumber:
          type: string
          example: "+1234567890"
        email:
          type: string
          format: email
          example: "info@joescoffee.com"
        status:
          type: string
          enum:
            - pending
            - cancelled
            - onboarded
            - active
            - suspended
          default: "pending"
          example: "pending"

    BusinessUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Joe's Coffee & Bakery"
        description:
          type: string
          example: "A cozy coffee shop and bakery"
        address:
          type: string
          example: "123 Main Street, New York, NY 10001"
        phoneNumber:
          type: string
          example: "+1234567890"
        email:
          type: string
          format: email
          example: "info@joescoffee.com"
        status:
          type: string
          enum:
            - pending
            - cancelled
            - onboarded
            - active
            - suspended
          example: "active"

    Owner:
      type: object
      required:
        - id
        - name
        - lastName
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 101
          description: Unique identifier for the owner
        name:
          type: string
          example: "John"
          description: Owner's first name
        lastName:
          type: string
          example: "Doe"
          description: Owner's last name
        address:
          type: string
          example: "456 Oak Avenue, Boston, MA 02101"
          description: Owner's residential address
        phoneNumber:
          type: string
          example: "+1987654321"
          description: Owner's contact phone number
        email:
          type: string
          format: email
          example: "john.doe@email.com"
          description: Owner's email address
        personalCode:
          type: string
          example: "12345678901"
          description: Owner's personal identification code (SSN, National ID, etc.)
        createdAt:
          type: string
          format: date-time
          example: "2024-01-10T09:00:00Z"
          description: Timestamp when owner was created
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T16:30:00Z"
          description: Timestamp when owner was last updated

    OwnerCreate:
      type: object
      required:
        - name
        - lastName
        - email
        - personalCode
      properties:
        name:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        address:
          type: string
          example: "456 Oak Avenue, Boston, MA 02101"
        phoneNumber:
          type: string
          example: "+1987654321"
        email:
          type: string
          format: email
          example: "john.doe@email.com"
        personalCode:
          type: string
          example: "12345678901"

    OwnerUpdate:
      type: object
      properties:
        name:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        address:
          type: string
          example: "456 Oak Avenue, Boston, MA 02101"
        phoneNumber:
          type: string
          example: "+1987654321"
        email:
          type: string
          format: email
          example: "john.doe@email.com"

    Employee:
      type: object
      required:
        - id
        - businessId
        - name
        - lastName
        - employeeCode
        - role
      properties:
        id:
          type: integer
          format: int64
          example: 201
          description: Unique identifier for the employee
        businessId:
          type: integer
          format: int64
          example: 1
          description: ID of the business this employee belongs to
        name:
          type: string
          example: "Jane"
          description: Employee's first name
        lastName:
          type: string
          example: "Smith"
          description: Employee's last name
        employeeCode:
          type: string
          example: "EMP001"
          description: Unique employee code used for login
        role:
          type: string
          enum:
            - employee
            - support
            - owner
          example: "employee"
          description: Employee's role in the system
        createdAt:
          type: string
          format: date-time
          example: "2024-01-12T11:00:00Z"
          description: Timestamp when employee was created
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-18T13:20:00Z"
          description: Timestamp when employee was last updated

    EmployeeCreate:
      type: object
      required:
        - businessId
        - name
        - lastName
        - employeeCode
        - password
        - role
      properties:
        businessId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Smith"
        employeeCode:
          type: string
          example: "EMP001"
          description: Unique employee code for login
        password:
          type: string
          format: password
          example: "securePassword123"
          description: Employee's password for authentication
        role:
          type: string
          enum:
            - employee
            - support
            - owner
          example: "employee"

    EmployeeUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Smith"
        employeeCode:
          type: string
          example: "EMP001"
        password:
          type: string
          format: password
          example: "newSecurePassword456"
          description: Update employee's password
        role:
          type: string
          enum:
            - employee
            - support
            - owner
          example: "employee"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: Current page number
        limit:
          type: integer
          example: 20
          description: Number of items per page
        totalItems:
          type: integer
          example: 150
          description: Total number of items
        totalPages:
          type: integer
          example: 8
          description: Total number of pages

    ApiError:
      type: object
      properties:
        errorCode:
          type: string
          example: "NOT_FOUND"
        message:
          type: string
          example: "The requested resource was not found."

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            invalidAmount:
              summary: Invalid payment amount
              value:
                errorCode: "INVALID_AMOUNT"
                message: "Payment amount must be greater than 0"
            missingField:
              summary: Missing required field
              value:
                errorCode: "MISSING_FIELD"
                message: "Missing required field: payment_type"

    UnauthorizedError:
      description: Unauthorized - invalid or missing authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            errorCode: "UNAUTHORIZED"
            message: "Invalid or expired authentication token"

    OrderNotFound:
      description: Order not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            errorCode: "ORDER_NOT_FOUND"
            message: "Order not found"

    PaymentConflict:
      description: Payment conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            amountExceedsBalance:
              summary: Amount exceeds remaining balance
              value:
                errorCode: "AMOUNT_EXCEEDS_BALANCE"
                message: "Payment amount ($50.00) exceeds remaining balance ($29.50)"
            orderAlreadyPaid:
              summary: Order already fully paid
              value:
                errorCode: "ORDER_ALREADY_PAID"
                message: "Order is already fully paid"
            orderClosed:
              summary: Order is closed
              value:
                errorCode: "ORDER_CLOSED"
                message: "Cannot add payment to closed order"

    UnprocessableEntity:
      description: Unprocessable entity - business logic error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            insufficientGiftCardBalance:
              summary: Insufficient gift card balance
              value:
                errorCode: "INSUFFICIENT_GIFT_CARD_BALANCE"
                message: "Gift card balance ($10.00) is less than requested amount ($15.00)"
                details:
                  available_balance: 10.00
                  requested_amount: 15.00
            stripePaymentFailed:
              summary: Stripe payment failed
              value:
                errorCode: "PAYMENT_FAILED"
                message: "Card payment failed: insufficient funds"
                details:
                  stripe_error_code: "insufficient_funds"
    ItemNotFound:
      description: Item not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ApiError" }
          example:
            errorCode: "ITEM_NOT_FOUND"
            message: "Item not found"
    VariationNotFound:
      description: Item variation not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ApiError" }
          example:
            errorCode: "VARIATION_NOT_FOUND"
            message: "Item variation not found"
    TaxNotFound:
      description: Tax not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ApiError" }
          example:
            errorCode: "TAX_NOT_FOUND"
            message: "Tax not found"
        
